# -*- mode: perl; -*-
package Devel::IPerl::Plugin::Perlbrew::Install;

use strict;
use warnings;
use feature 'say';

use JSON::MaybeXS qw(decode_json encode_json);
use Path::Class qw{dir};

our $IPERL = 'iperl';
our $JUPYTER = 'jupyter';

my @VARIABLES =
  (qw{PERLBREW_HOME PERLBREW_PATH PERLBREW_PERL PERLBREW_ROOT PERLBREW_VERSION});

sub augment_kernel_spec {
  my $class       = shift;
  my $kernel_file = shift;
	my $kernel_spec = decode_json( $kernel_file->slurp );
  my $augmented   =
    (exists $kernel_spec->{env} && $kernel_spec->{env}{PERLBREW_ROOT} ? 0 : 1);
  $kernel_spec->{env} = {
    %{$kernel_spec->{env} || {}}
  };
  for my $var (@VARIABLES) {
    $kernel_spec->{env}{$var} = $ENV{$var};
  }
  if ($augmented) {
    $kernel_file->spew( encode_json($kernel_spec) );
  }
  return $augmented;
}

sub get_ipython_target_dir {
  my $ipython_dir;
  open my $fh, '-|', "$JUPYTER --data-dir" or return;
  while (my $line = <$fh>) {
    chomp($line);
    $ipython_dir ||= $line;
  }
	return unless length $ipython_dir;
	$ipython_dir;
}

sub get_kernels_target_dir {
	my $ipython_dir = get_ipython_target_dir();
	return unless length $ipython_dir;
	dir($ipython_dir)->subdir(qw[ kernels iperl ]);
}

sub main {
  my ($class) = @_;

  $class->report_iperl_version;

  my $target = $class->get_kernels_target_dir;
  my $kernel_file = dir($target)->file('kernel.json');

  if (-e $kernel_file) {
    $class->augment_kernel_spec($kernel_file) if $ENV{PERLBREW_ROOT};
  } else {
    say STDERR "$kernel_file does not exist";
    say STDERR 'augment_kernel_spec() requires an existing kernel.json';
    return 1;
  }

  return 0;
}

sub report_iperl_version {
  my $class = shift;
  open my $fh, '-|', "$IPERL --version 2>&1" or return;
  while (<$fh>) {
    chomp;
    say STDERR $_;
  }
}

exit(__PACKAGE__->main()) unless (caller());

1;
